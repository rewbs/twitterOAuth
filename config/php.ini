[PHP]
;;;;;;;;
; Note ;
;;;;;;;;
; This is the version of the PHP ini file suitable for development use with the
; Runtime for PHP in WebSphere sMash.
; This file only includes directives that are used by the WebSphere sMash
; Runtime for PHP.
; If there is a directive with a comment of "Supported: No" it means that the
; WebSphere sMash Runtime for PHP only supports the value given. Any changes to
; the value will be ignored and it will not be possible to access the value
; through the PHP Options & Information functions from a PHP script (for example,
; ini_get();


;;;;;;;;;;;
; WARNING ;
;;;;;;;;;;;
; This is the default settings file for new PHP installations.
; By default, PHP installs itself with a configuration suitable for
; development purposes, and *NOT* for production purposes.
; For several security-oriented considerations that should be taken
; before going online with your site, please consult php.ini-recommended
; and http://php.net/manual/en/security.php.


;;;;;;;;;;;;;;;;;;;
; About php.ini   ;
;;;;;;;;;;;;;;;;;;;
; This file controls many aspects of PHP's behavior.  In order for PHP to
; read it, it must be named 'php.ini'.  The Runtime for PHP in Project
; Zero looks for this file in the <app-home>/config directory of your
; Project Zero application.
;
; The syntax of the file is extremely simple.  Whitespace and Lines
; beginning with a semicolon are silently ignored (as you probably guessed).
; Section headers (e.g. [Foo]) are also silently ignored, even though
; they might mean something in the future.
;
; Directives are specified using the following syntax:
; directive = value
; Directive names are *case sensitive* - foo=bar is different from FOO=bar.
;
; The value can be a string, a number, a PHP constant (e.g. E_ALL or M_PI), one
; of the INI constants (On, Off, True, False, Yes, No and None) or an expression
; (e.g. E_ALL & ~E_NOTICE), or a quoted string ("foo").
;
; Expressions in the INI file are limited to bitwise operators and parentheses:
; |        bitwise OR
; &        bitwise AND
; ~        bitwise NOT
; !        boolean NOT
;
; Boolean flags can be turned on using the values 1, On, True or Yes.
; They can be turned off using the values 0, Off, False or No.
;
; An empty string can be denoted by simply not writing anything after the equal
; sign, or by using the None keyword:
;
;  foo =         ; sets foo to an empty string
;  foo = none    ; sets foo to an empty string
;  foo = "none"  ; sets foo to the string 'none'
;
; If you use constants in your value, and these constants belong to a
; dynamically loaded extension (either a PHP extension or a Zend extension),
; you may only use these constants *after* the line that loads the extension.

;;;;;;;;;;;;;;
; P8 Options ;
;;;;;;;;;;;;;;

; This sets the level of optimization performed on the PHP code when it
; is compiled for execution. The default value provides the best
; performance while, at the same time, being safe for all applications.
; It may be set to "int" to force interpreted execution which performs
; more slowly.
; Default : 2
; Differences : This is an option that is specific to the runtime for
; PHP in WebSphere sMash.
;optimization_level = int


; Enables the use of an in memory cache of compiled PHP code. This
; eliminates the parsing a compilation step for the second and subsequent
; run of a PHP file. It provides a performance improvement for repeatedly
; executed files. Additional heap space is required to hold this cache.
; The space required is dependant on the number and complexity of files
; that it holds.
; Default : On
; Differences : This is an option that is specific to the runtime for
; PHP in WebSphere sMash.
;code_cache = On

; Sets a limit on the number of files that will be held in the code cache.
; When this limit is reached entries are removed on a least recently used
; basis in order to accommodate new entries.
; Default : 400
; Differences : This is an option that is specific to the runtime for
; PHP in WebSphere sMash.
;code_cache_limit = 400

; Enables the use of a filesystem store of compiled PHP code, this is an
; extension of the memory based code cache, however it is not limited in
; size and persists over application stops and recycle events.
; Default : Off
; Differences : This is an option that is specific to the runtime for
; PHP in WebSphere sMash.
persistent_code_cache = On

; Specifies the directory in which the persistent code cache is written.
; Default : .
; Differences : This is an option that is specific to the runtime for
; PHP in WebSphere sMash.
persistent_code_cache_dir = ./.zero/private/p8codecache

; Specifies that local variables should always be available in a map
; data structure. This disables some performance optimisations.
; This is required such to ensure that the "context" parameter is always
; filled in when a user error handler is invoked.
; Default: Off
; Differences : This is an option that is specific to the runtime for
; PHP in WebSphere sMash.
; map_locals = Off

;;;;;;;;;;;;;;;;;;;;
; Language Options ;
;;;;;;;;;;;;;;;;;;;;

; Enable compatibility mode with Zend Engine 1 (PHP 4.x)
; Supported : No
; Default : Off
; Differences :
;zend.ze1_compatibility_mode = Off


; Allow the <? tag.  Otherwise, only <?php and <script> tags are recognized.
; NOTE: Using short tags should be avoided when developing applications or
; libraries that are meant for redistribution, or deployment on PHP
; servers which are not under your control, because short tags may not
; be supported on the target server. For portable, redistributable code,
; be sure not to use short tags.
; Supported : Yes
; Default : Off
; Differences :
short_open_tag = On

; Allow ASP-style <% %> tags.
; Supported : Yes
; Default : Off
; Differences :
asp_tags = Off

; The number of significant digits displayed in floating point numbers.
; Supported : Yes
; Default : 14
; Differences :
precision = 14

; Enforce year 2000 compliance (will cause problems with non-compliant browsers)
; Supported : No
; Default : On
; Differences :
y2k_compliance = On

; Output buffering allows you to send header lines (including cookies) even
; after you send body content, at the price of slowing PHP's output layer a
; bit.  You can enable output buffering during runtime by calling the output
; buffering functions.  You can also enable output buffering for all files by
; setting this directive to On.  If you wish to limit the size of the buffer
; to a certain size - you can use a maximum number of bytes instead of 'On', as
; a value for this directive (e.g., output_buffering=4096).
; Supported : Yes
; Default : Off
; Differences :
output_buffering = Off

; You can redirect all of the output of your scripts to a function.
; Setting any output handler automatically turns on output buffering.
; Note: People who wrote portable scripts should not depend on this ini
;       directive. Instead, explicitly set the output handler using ob_start().
;       Using this ini directive may cause problems unless you know what script
;       is doing.
; Supported : Yes
; Default : Off
; Differences :
output_handler =

; Implicit flush tells PHP to tell the output layer to flush itself
; automatically after every output block.  This is equivalent to calling the
; PHP function flush() after each and every call to print() or echo() and each
; and every HTML block.  Turning this option on has serious performance
; implications and is generally recommended for debugging purposes only.
; Supported : Yes
; Default : Off
; Differences :
implicit_flush = Off

; The unserialize callback function will be called (with the undefined class'
; name as parameter), if the unserializer finds an undefined class
; which should be instantiated.
; A warning appears if the specified function is not defined, or if the
; function doesn't include/implement the missing class.
; So only set this entry, if you really want to implement such a
; callback-function.
; Supported : Yes
; Default :
; Differences :
unserialize_callback_func =

; When floats & doubles are serialized store serialize_precision significant
; digits after the floating point. The default value ensures that when floats
; are decoded with unserialize, the data will remain the same.
; Supported : Yes
; Default : Off
; Differences :
serialize_precision = 100

; Whether to enable the ability to force arguments to be passed by reference
; at function call time.  This method is deprecated and is likely to be
; unsupported in future versions of PHP/Zend.  The encouraged method of
; specifying which arguments should be passed by reference is in the function
; declaration.  You're encouraged to try and turn this option Off and make
; sure your scripts work properly with it in order to ensure they will work
; with future versions of the language (you will receive a warning each time
; you use this feature, and the argument will be passed by value instead of by
; reference).
; Supported : No
; Default : Off
; Differences : Call time pass by reference is not supported.
;allow_call_time_pass_reference = Off

;
; Safe Mode
; Supported : No
; Default : Off
; Differences :
safe_mode = Off

; By default, Safe Mode does a UID compare check when
; opening files. If you want to relax this to a GID compare,
; then turn on safe_mode_gid.
; Supported : No
; Default : Off
; Differences :
safe_mode_gid = Off

; When safe_mode is on, UID/GID checks are bypassed when
; including files from this directory and its subdirectories.
; (directory must also be in include_path or full path must
; be used when including)
; Supported : No
; Default :
; Differences :
safe_mode_include_dir =

; When safe_mode is on, only executables located in the safe_mode_exec_dir
; will be allowed to be executed via the exec family of functions.
; Supported : No
; Default :
; Differences :
safe_mode_exec_dir =

; Setting certain environment variables may be a potential security breach.
; This directive contains a comma-delimited list of prefixes.  In Safe Mode,
; the user may only alter environment variables whose names begin with the
; prefixes supplied here.  By default, users will only be able to set
; environment variables that begin with PHP_ (e.g. PHP_FOO=BAR).
;
; Note:  If this directive is empty, PHP will let the user modify ANY
; environment variable!
; Supported : No
; Default :
; Differences : putenv() is not supported so no environment variables can be changed.
;safe_mode_allowed_env_vars = PHP_

; This directive contains a comma-delimited list of environment variables that
; the end user won't be able to change using putenv().  These variables will be
; protected even if safe_mode_allowed_env_vars is set to allow to change them.
; Supported : No
; Default :
; Differences : putenv() is not supported so no environment variables can be changed
;safe_mode_protected_env_vars = LD_LIBRARY_PATH

; open_basedir, if set, limits all file operations to the defined directory
; and below.  This directive makes most sense if used in a per-directory
; or per-virtualhost web server configuration file. This directive is
; *NOT* affected by whether Safe Mode is turned On or Off.
; Supported : Yes
; Default :
; Differences :
;open_basedir =

; This directive allows you to disable certain functions for security reasons.
; It receives a comma-delimited list of function names. This directive is
; *NOT* affected by whether Safe Mode is turned On or Off.
; Supported : No
; Default :
; Differences :
disable_functions =

; This directive allows you to disable certain classes for security reasons.
; It receives a comma-delimited list of class names. This directive is
; *NOT* affected by whether Safe Mode is turned On or Off.
; Supported : No
; Default :
; Differences :
disable_classes =

; Colors for Syntax Highlighting mode.  Anything that's acceptable in
; <span style="color: ???????"> would work.
; Supported : Yes
; Default : #DD0000
; Differences :
;highlight.string = #DD0000

; Colors for Syntax Highlighting mode.  Anything that's acceptable in
; <span style="color: ???????"> would work.
; Supported : Yes
; Default : #FF8800
; Differences :
;highlight.comment = #FF9900

; Colors for Syntax Highlighting mode.  Anything that's acceptable in
; <span style="color: ???????"> would work.
; Supported : Yes
; Default : #007700
; Differences :
;highlight.keyword = #007700

; Colors for Syntax Highlighting mode.  Anything that's acceptable in
; <span style="color: ???????"> would work.
; Supported : Yes
; Default : #FFFFFF
; Differences :
;highlight.bg = #FFFFFF

; Colors for Syntax Highlighting mode.  Anything that's acceptable in
; <span style="color: ???????"> would work.
; Supported : Yes
; Default : #0000BB
; Differences :
;highlight.default = #0000BB

; Colors for Syntax Highlighting mode.  Anything that's acceptable in
; <span style="color: ???????"> would work.
; Supported : Yes
; Default : #000000
; Differences :
;highlight.html = #000000

; If enabled, the request will be allowed to complete even if the user aborts
; the request. Consider enabling it if executing long request, which may end up
; being interrupted by the user or a browser timing out.
; Supported : No
; Default : On
; Differences :
; ignore_user_abort = On

;
; Misc
;
; Decides whether PHP may expose the fact that it is installed on the server
; (e.g. by adding its signature to the Web server header).  It is no security
; threat in any way, but it makes it possible to determine whether you use PHP
; on your server or not.
; Supported : No
; Default : Off
; Differences :
expose_php = Off


;;;;;;;;;;;;;;;;;;;
; Resource Limits ;
;;;;;;;;;;;;;;;;;;;

; Maximum execution time of each script, in seconds
; Supported : Yes
; Default : 30
; Differences :
max_execution_time = 0

; Maximum nesting of arrays created from POST/GET data
; Supported : Yes
; Default : 64
; Differences :
; max_input_nesting_level = 64

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Error handling and logging ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; error_reporting is a bit-field.  Or each number up to get desired error
; reporting level
; E_ALL             - All errors and warnings (doesn't include E_STRICT)
; E_ERROR           - fatal run-time errors
; E_RECOVERABLE_ERROR  - almost fatal run-time errors
; E_WARNING         - run-time warnings (non-fatal errors)
; E_PARSE           - compile-time parse errors
; E_NOTICE          - run-time notices (these are warnings which often result
;                     from a bug in your code, but it's possible that it was
;                     intentional (e.g., using an uninitialized variable and
;                     relying on the fact it's automatically initialized to an
;                     empty string)
; E_STRICT          - run-time notices, enable to have PHP suggest changes
;                     to your code which will ensure the best interoperability
;                     and forward compatibility of your code
; E_CORE_ERROR      - fatal errors that occur during PHP's initial startup
; E_CORE_WARNING    - warnings (non-fatal errors) that occur during PHP's
;                     initial startup
; E_COMPILE_ERROR   - fatal compile-time errors
; E_COMPILE_WARNING - compile-time warnings (non-fatal errors)
; E_USER_ERROR      - user-generated error message
; E_USER_WARNING    - user-generated warning message
; E_USER_NOTICE     - user-generated notice message
;
; Examples:
;
;   - Show all errors, except for notices and coding standards warnings
;
;error_reporting = E_ALL & ~E_NOTICE
;
;   - Show all errors, except for notices
;
;error_reporting = E_ALL & ~E_NOTICE | E_STRICT
;
;   - Show only errors
;
;error_reporting = E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR
;
;   - Show all errors except for notices and coding standards warnings
;
; Supported : Yes
; Default : E_ALL & ~E_NOTICE & ~E_STRICT
; Differences :
error_reporting  = E_ALL | E_STRICT

; Print out errors (as a part of the output).  For production web sites,
; you're strongly encouraged to turn this feature off, and use error logging
; instead (see below).  Keeping display_errors enabled on a production web site
; may reveal security information to end users, such as file paths on your Web
; server, your database schema or other information.
;
; possible values for display_errors:
;
; Off        - Do not display any errors
; stderr     - Display errors to STDERR (affects only CGI/CLI binaries!)
;
;display_errors = "stderr"
;
; stdout (On) - Display errors to STDOUT
;
; Supported : Yes
; Default : On
; Differences : Value of stderr is not supported.
display_errors = Off

; Even when display_errors is on, errors that occur during PHP's startup
; sequence are not displayed.  It's strongly recommended to keep
; display_startup_errors off, except for when debugging.
; Supported : Yes
; Default : Off
; Differences :
display_startup_errors = Off

; Log errors into a log file (server-specific log, stderr, or error_log)
; As stated above, you're strongly advised to use error logging in place of
; error displaying on production web sites.
; Supported : Yes
; Default : Off
; Differences :
log_errors = On

; Set maximum length of log_errors. In error_log information about the source is
; added. The default is 1024 and 0 allows to not apply any maximum length at all.
; Supported : Yes
; Default : 1024
; Differences :
log_errors_max_len = 1024

; Do not log repeated messages. Repeated errors must occur in same file on same
; line until ignore_repeated_source is set true.
; Supported : Yes
; Default : Off
; Differences :
ignore_repeated_errors = Off

; Ignore source of message when ignoring repeated messages. When this setting
; is On you will not log errors with repeated messages from different files or
; source lines.
; Supported : Yes
; Default : Off
; Differences :
ignore_repeated_source = Off

; Store the last error/warning message in $php_errormsg (boolean).
; Note: track_errors imposes a significant performance overhead and should be
; avoided for production deployments.
; Supported : Yes
; Default : Off
; Differences :
track_errors = Off

; Disable the inclusion of HTML tags in error messages.
; Note: Never use this feature for production boxes.
; Supported : Yes
; Default : On
; Differences :
html_errors = Off

; If html_errors is set On PHP produces clickable error messages that direct
; to a page describing the error or function causing the error in detail.
; You can download a copy of the PHP manual from http://www.php.net/docs.php
; and change docref_root to the base URL of your local copy including the
; leading '/'. You must also specify the file extension being used including
; the dot.
; Note: Never use this feature for production boxes.
; Supported : Yes
; Default :
; Differences :
docref_root =

; If html_errors is set On PHP produces clickable error messages that direct
; to a page describing the error or function causing the error in detail.
; You must specify the file extension being used including
; the dot.
; Supported : Yes
; Default :
; Differences :
docref_ext = .html

; String to output before an error message.
; Supported : Yes
; Default :
; Differences :
error_prepend_string =

; String to output after an error message.
; Supported : Yes
; Default :
; Differences :
error_append_string =

; Log errors to specified file.
; Supported : Yes
; Default :
; Differences : A value of syslog is not supported.
;error_log = filename

;;;;;;;;;;;;;;;;;
; Data Handling ;
;;;;;;;;;;;;;;;;;
;
; Note - track_vars is ALWAYS enabled as of PHP 4.0.3

; The separator used in PHP generated URLs to separate arguments.
; Supported : Yes
; Default : &
; Differences :
;arg_separator.output = "&amp;"

; List of separator(s) used by PHP to parse input URLs into variables.
; NOTE: Every character in this directive is considered as separator!
; Supported : Yes
; Default : &
; Differences :
;arg_separator.input = ";&"


; Whether or not to register the EGPCS variables as global variables.  You may
; want to turn this off if you don't want to clutter your scripts' global scope
; with user data.  This makes most sense when coupled with track_vars - in which
; case you can access all of the GPC variables through the $HTTP_*_VARS[],
; variables.
;
; You should do your best to write your scripts so that they do not require
; register_globals to be on;  Using form variables as globals can easily lead
; to possible security problems, if the code is not very well thought of.
; Supported : No
; Default : Off
; Differences :
;register_globals = Off

; Whether or not to register the old-style input arrays, HTTP_GET_VARS
; and friends.  If you're not using them, it's recommended to turn them off,
; for performance reasons.
; Supported : No
; Default : Off
; Differences :
;register_long_arrays = On


; This directive tells PHP whether to declare the argv&argc variables (that
; would contain the GET information).  If you don't use these variables, you
; should turn it off for increased performance.
; Supported : No
; Default : Off
; Differences :
;register_argc_argv = Off

; When enabled, the SERVER and ENV variables are created when they're first
; used (Just In Time) instead of when the script starts. If these variables
; are not used within a script, having this directive on will result in a
; performance gain. The PHP directives register_globals, register_long_arrays,
; and register_argc_argv must be disabled for this directive to have any affect.
; Supported : No
; Default : On
; Differences :
;auto_globals_jit = On

; Sets the magic_quotes state for GPC (Get/Post/Cookie) operations.
; When magic_quotes are on, all single-quote, double quote, backslash
; and NULs are escaped with a backslash automatically.
; Supported : Yes
; Default : Off
; Differences :
magic_quotes_gpc = Off

;;;;;;;;;;;;;;;;;;;;;;;;;
; Paths and Directories ;
;;;;;;;;;;;;;;;;;;;;;;;;;

; Path to search for include files
; LINIX: "/path1:/path2"
; Windows: "\path1;\path2"
; Supported : Yes
; Default :
; Differences :
;include_path = ".:/php/includes"



; The directory under which PHP opens the script using /~username used only
; if nonempty.
; Supported : No
; Default :
; Differences :
user_dir =

; Directory in which the native loadable extensions (modules) reside.
; The JVM variable java.library.path is also searched for native loadable extensions.
; Java loadable extensions are found using the classpath and not this directive.
; Supported : Yes
; Default :
; Differences : Only used to find native loadable extensions (dll, so, dylib) and
; not extensions written in Java. Native loadable extensions can also be in a directory
; specified on the java.library.path.
extension_dir =

; Whether or not to enable the dl() function.
; Supported : Yes
; Default : On
; Differences :
enable_dl = On

; Maximum size of POST data that PHP will accept.
; Supported : Yes
; Default : 8M
; Differences :
post_max_size = 8M

;;;;;;;;;;;;;;;;
; File Uploads ;
;;;;;;;;;;;;;;;;

; Whether to allow HTTP file uploads.
; Supported : No
; Default : On
; Differences :
file_uploads = On

; Temporary directory for HTTP uploaded files (will use system default if not
; specified).
; Supported : No
; Default :
; Differences :
;upload_tmp_dir =

; Maximum allowed size for uploaded files.
; Supported : No
; Default : 2M
; Differences :
upload_max_filesize = 2M



;;;;;;;;;;;;;;;;;;;;;;
; Dynamic Extensions ;
;;;;;;;;;;;;;;;;;;;;;;

; If you wish to have an extension loaded automatically, use the following
; syntax:
;   For extensions written in Java use:
;   extension=java_class_name
;
;   For extensions written in C use:
;   extension=extension_name
;
; For example:
;
;   extension=php_gd
;
; The appropriate filesystem extension (.dll, .so) will automatically be appended.
;
; Note that it should be the name of the module only; no directory information
; needs to go here.  Specify the location of the extension with the
; extension_dir directive above.
; Java extensions
; extension = package.Class
; C Extensions
; extension = name of library

extension = com.ibm.p8.library.zlib.ZLibLibrary
extension = com.ibm.p8.library.standard.MbStringLibrary
extension = com.ibm.p8.library.db.MysqlLibrary
extension = com.ibm.p8.library.db.DB2Library
extension = com.ibm.p8.library.mcrypt.McryptLibrary
; extension = com.ibm.p8.library.dom.DomExtensionLibrary
; extension = com.ibm.p8.library.pdo.PdoLibrary
; extension = com.ibm.p8.library.pdo.PdoJdbcDerbyLibrary
; extension = com.ibm.p8.library.pdo.PdoJdbcDb2Library
; extension = com.ibm.p8.library.pdo.PdoJdbcMysqlLibrary
; Project Zero specific extensions
extension = zero.php.ZeroExtension
extension = zero.php.JSONExtension
extension = zero.php.LoginServiceExtension
extension = zero.php.ACFExtension
extension = zero.data.php.QueryExtension
extension = zero.php.XMLExtension
extension = zero.php.ConnectionExtension
extension = zero.php.URIUtilsExtension
extension = zero.php.CSRFExtension
extension = zero.resource.php.ZRMExtension
extension = com.ibm.p8.engine.xapi.groovy.GroovyExtensionLibrary
extension = com.ibm.p8.engine.library.cache.APCCache

; C extensions
extension=php_calendar
extension=php_ctype
extension=php_zlib
extension=php_ldap
extension=php_hash
extension=php_xml
extension=php_gd
extension=php_iconv
extension=php_imap
extension=php_curl
extension=php_mime_magic
extension=php_exif
extension=php_libxml
extension=php_simplexml

;;;;;;;;;;;;;;;;;;;;
; encoding options ;
;;;;;;;;;;;;;;;;;;;;

[unicode]
; Runtime encoding is used when a PHP string is converted into a Java string.
; Internally, the PHP runtime preserves the ability to store binary data in a
; PHP string, which is essential for full support of the PHP 5 language.
; The runtime encoding is used when a PHP string is explicitly converted to a
; Java string, such as when it is stored in the global context as described in
; PHP global context reference.
; Default: UTF-8
; Differences:
unicode.runtime_encoding = UTF-8

; Script encoding defines how the PHP file is encoded. This
; must be correctly set in order for string literals and PHP names, such as
; function, variable and class names, to be correctly parsed by the runtime.
; Default: UTF-8
unicode.script_encoding = UTF-8

;;;;;;;;;;;;;;;;;;;
; Module Settings ;
;;;;;;;;;;;;;;;;;;;

[Date]
; Defines the default timezone used by the date functions
;date.timezone =

;date.default_latitude = 31.7667
;date.default_longitude = 35.2333

;date.sunrise_zenith = 90.583333
;date.sunset_zenith = 90.583333


[iconv]
;iconv.input_encoding = ISO-8859-1
;iconv.internal_encoding = ISO-8859-1
;iconv.output_encoding = ISO-8859-1


[Pcre]
;PCRE library backtracking limit.
;pcre.backtrack_limit = 100000

;PCRE library recursion limit.
;Please note that if you set this value to a high number you may consume all
;the available process stack and eventually crash PHP (due to reaching the
;stack size limit imposed by the Operating System).
;pcre.recursion_limit = 100000


[MySQL]
; Allow or prevent persistent links.
mysql.allow_persistent = On

; Maximum number of persistent links.  -1 means no limit.
mysql.max_persistent = -1

; Maximum number of links (persistent + non-persistent).  -1 means no limit.
mysql.max_links = -1

; Default port number for mysql_connect().  If unset, mysql_connect() will use
; the $MYSQL_TCP_PORT or the mysql-tcp entry in /etc/services or the
; compile-time value defined MYSQL_PORT (in that order).  Win32 will only look
; at MYSQL_PORT.
mysql.default_port =

; Default socket name for local MySQL connects.  If empty, uses the built-in
; MySQL defaults.
mysql.default_socket =

; Default host for mysql_connect() (doesn't apply in safe mode).
mysql.default_host =

; Default user for mysql_connect() (doesn't apply in safe mode).
mysql.default_user =

; Default password for mysql_connect() (doesn't apply in safe mode).
; Note that this is generally a *bad* idea to store passwords in this file.
; *Any* user with PHP access can run 'echo get_cfg_var("mysql.default_password")
; and reveal this password!  And of course, any users with read access to this
; file will be able to reveal the password as well.
mysql.default_password =

; Maximum time (in seconds) for connect timeout. -1 means no limit
mysql.connect_timeout = 60

; Trace mode. When trace_mode is active (=On), warnings for table/index scans and
; SQL-Errors will be displayed.
mysql.trace_mode = Off


[Session]
; Handler used to store/retrieve data.
; For WebSphere sMash you should use zerouserzone. This will
; enable session information to be stored in the Global context
; user zone. This will mean the zsessionid cookie will be used
; to track sessions, and not the values given in this php.ini
; file. It also means that session timeouts will be controlled by
; the settings in the zero.config, i.e. /config/userZone/idleTimeout and
; /config/userZone/invalidationTimeout
session.save_handler = zerouserzone


; Argument passed to save_handler.  In the case of files, this is the path
; where data files are stored. Note: Windows users have to change this
; variable in order to use PHP's session functions.
;
; As of PHP 4.0.1, you can define the path as:
;
;     session.save_path = "N;/path"
;
; where N is an integer.  Instead of storing all the session files in
; /path, what this will do is use subdirectories N-levels deep, and
; store the session data in those directories.  This is useful if you
; or your OS have problems with lots of files in one directory, and is
; a more efficient layout for servers that handle lots of sessions.
;
; NOTE 1: PHP will not create this directory structure automatically.
;         You can use the script in the ext/session dir for that purpose.
; NOTE 2: See the section on garbage collection below if you choose to
;         use subdirectories for session storage
;
; The file storage module creates files using mode 600 by default.
; You can change that by using
;
;     session.save_path = "N;MODE;/path"
;
; where MODE is the octal representation of the mode. Note that this
; does not overwrite the process's umask.
; Differences : This option is not used when session.save_handler = zerouserzone.
;session.save_path = "/tmp"

; Whether to use cookies.
; Differences : This option is not used when session.save_handler = zerouserzone.
session.use_cookies = 1

; Specifies whether cookies should only be sent over secure connections.
; Differences : This option is not used when session.save_handler = zerouserzone.
;session.cookie_secure =

; This option enables administrators to make their users invulnerable to
; attacks which involve passing session ids in URLs; defaults to 0.
; Differences : This option is not used when session.save_handler = zerouserzone.
; session.use_only_cookies = 1


; Name of the session (used as cookie name).
session.name = PHPSESSID

; Initialize session on request startup.
session.auto_start = 0

; Lifetime in seconds of cookie or, if 0, until browser is restarted.
session.cookie_lifetime = 0

; The path for which the cookie is valid.
session.cookie_path = /

; The domain for which the cookie is valid.
session.cookie_domain =

; Whether or not to add the httpOnly flag to the cookie, which makes it inaccessible to
browser scripting languages such as JavaScript.
session.cookie_httponly =

; Handler used to serialize data.  php is the standard serializer of PHP.
session.serialize_handler = php

; Define the probability that the 'garbage collection' process is started
; on every session initialization.
; The probability is calculated by using gc_probability/gc_divisor,
; e.g. 1/100 means there is a 1% chance that the GC process starts
; on each request.
; Differences : This option is not used when session.save_handler = zerouserzone.
session.gc_probability = 1

; Define the probability that the 'garbage collection' process is started
; on every session initialization.
; The probability is calculated by using gc_probability/gc_divisor,
; e.g. 1/100 means there is a 1% chance that the GC process starts
; on each request.
; Differences : This option is not used when session.save_handler = zerouserzone.
session.gc_divisor = 100

; After this number of seconds, stored data will be seen as 'garbage' and
; cleaned up by the garbage collection process.
; Differences : This option is not used when session.save_handler = zerouserzone.
session.gc_maxlifetime = 1440


; Check HTTP Referer to invalidate externally stored URLs containing ids.
; HTTP_REFERER has to contain this substring for the session to be
; considered as valid.
; Differences : This option is not used when session.save_handler = zerouserzone.
session.referer_check =


; Set to {nocache,private,public,} to determine HTTP caching aspects
; or leave this empty to avoid sending anti-caching headers.
; Differences : This option is not used when session.save_handler = zerouserzone.
session.cache_limiter = nocache

; Document expires after n minutes.
; Differences : This option is not used when session.save_handler = zerouserzone.
session.cache_expire = 180


[mbstring]
; internal/script encoding.
; Some encoding cannot work as internal encoding.
; (e.g. SJIS, BIG5, ISO-2022-*)
;mbstring.internal_encoding = EUC-JP


[gd]
; Tell the jpeg decode to libjpeg warnings and try to create
; a gd image. The warning will then be displayed as notices
; disabled by default
;gd.jpeg_ignore_warning = 0
